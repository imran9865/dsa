Program 1:
Find Mean and standard deviation of n Number.
#include<stdio.h>
#include<math.h>
void main()
{
float x[50],sum,mean,sd;
int n,i;
printf("How many numbers(max 50)?");
scanf("%d",&n);
printf("Enter the numbers you want to calculate:");
for(i=0;i<n;i++)
{
scanf("%f",&x[i]);
}
sum=0.0;
for (i=0;i<n;i++)
{
sum+=x[i];
mean=sum/n;
}
for(i=0;i<n;i++)
{
sum+=(x[i]-mean)*(x[i]-mean);
sd=sqrt (sum/n);
}
printf("mean =%.3f\n",mean);
printf("standard deviation=%.3f\n",sd);
}

Output:
How many numbers(max 50)?5
Enter the numbers you want to calculate:5
4
3
6
7
mean = 5.000
standard deviation=2.646

Program 2:
A. Sum of rows and column of a matrix.
#include<stdio.h>
void main()
{
static int array[10][10];
int i,j,m,n,sum=0;
printf("Enter the order of the matrix\n");
scanf("%d%d",&m,&n);
printf("Enter the co-efficient of the matrix\n");
for(i=0;i<m;++i)
{
for(j=0;j<n;++j)
{
scanf("%d",&array[i][j]);
}
}
for(i=0;i<m;++i)
{
for(j=0;j<n;++j)
{
sum=sum+array[i][j];
}
printf("sum of the row is %d row is =%d\n",i,sum);
sum=0;
}
sum=0;
for(j=0;j<n;++j)
{
for(i=0;i<n;++i)
{
sum=sum+array[i][j];
}
printf("sum of the column is %d column is =%d\n",j,sum);
sum=0;
}
}

Output:
Enter the order of the matrix
2 2
Enter the co-efficient of the matrix
15 30
20 40
sum of the row is 0 row is =45
sum of the row is 1 row is =60
sum of the column is 0 column is =35
sum of the column is 1 column is =70

Program 2:
B. Trace the sum of diagonal elements.
#include<stdio.h>
void main()
{
static int array[10][10];
int i,j,f,m,n,a=0,sum=0;
printf("Enter the order of the matrix\n");
scanf("%d%d",&m,&n);
if(m==n)
{
printf("Enter the co-efficient of matrix\n");
for(i=0;i<m;++i)
{
for(j=0;j<n;++j)
{
scanf("%d",&array[i][j]);
}
}
printf("The given matrix is\n");
for(i=0;i<m;++i)
{
for(j=0;j<n;++j)
{
printf("%d",array[i][j]);
}
for(i=0;i<m;++i)
{
sum+=array[i][i];
a=a+array[i][m-i-1];
}
}
printf("\nThe Sum of the main diagonal Element is =%d\n",sum);
printf("The Sum of the off diagonal Element is =%d\n",a);
}
else
printf("The given order is not square matrix\n");
}

Output:
Enter the order of the matrix
2 2
Enter the co-efficient of matrix
34 45
40 50
The given matrix is
3445
The Sum of the main diagonal Element is =0
The Sum of the off diagonal Element is =85

Program 2:
C. Sum of all elements for a given matrix.
#include<stdio.h>
void main()
{
int i,j,rows,columns,sum=0;
printf("Enter the order of matrix:\n");
scanf("%d%d",&rows,&columns);
printf("Enter the element of the matrix:\n");
int math[rows][columns];
for(i=0;i<rows;i++)
{
for(j=0;j<columns;j++)
{
scanf("%d",&math[i][j]);
}
}
for(i=0;i<rows;i++)
{
for(j=0;j<columns;j++)
{
sum=sum+math[i][j];
}
}
printf("The sum of the elements in the matrix is %d",sum);
}

Output:
Enter the order of matrix:
2 2
Enter the element of the matrix:
10 20
30 60
The sum of the elements in the matrix is 120

Program 3:
Perform Matrix addition and Multiplication operations.
#include<stdio.h>
int main()
{
int i,j,rows,columns,a[10][10],b[10][10];
int addition[10][10],multiplication[10][10];
printf("\n Enter the Order of Matrix:");
scanf("%d%d",&i,&j);
printf("Enter the First Array Matrix Elements:\n");
for(rows=0;rows<i;rows++)
{
for(columns=0;columns<i;columns++)
{
scanf("%d",&a[rows][columns]);
}
}
printf("\n Enter the Second Array Matrix Elements:\n");
for(rows=0;rows<i;rows++)
{
for(columns=0;columns<i;columns++)
{
scanf("%d",&b[rows][columns]);
}
}
for(rows=0;rows<i;rows++)
{
for(columns=0;columns<i;columns++)
{
addition[rows][columns] = a[rows][columns]+b[rows][columns];
multiplication[rows][columns] = a[rows][columns]*b[rows][columns];
}
}
printf("\nAdd\tmulti\t");
for(rows=0;rows<i;rows++)
{
for(columns=0;columns<i;columns++)
{
printf("\n%d\t",addition[rows][columns]);
printf("%d\t\t",multiplication[rows][columns]);
}
}
return 0;
}

Output:
Enter the Order of Matrix:2
2
Enter the First Array Matrix Elements:
1
2
3
2
Enter the Second Array Matrix Elements:
2
3
3
2
Add
3
5
6
4

multi
2
6
9
4

Program 4:
Search for an Element using Sequential and Binary Search.
#include<stdio.h>
void Sequential_Search(int array[],int size,int n)
{
int i;
for(i=0;i<size;i++)
{
if(array[i]==n)
{
printf("%d Found at location%d.\n",n,i++);
break;
}
}
if(i==size)
printf("Not Found %d is not present in the list.\n",n);
}
void Binary_Search(int array[],int size,int n)
{
int i,first,last,middle;
first=0;
last=size-1;
middle=(first+last)/2;
while(first<=last)
{
if(array[middle]<n)
first=middle+1;
else if(array[middle]==n)
{
printf("%d Found at location%d.\n",n,middle+1);
break;
}
else
last=middle-1;
middle=(first+last)/2;
}
if(first>last)
printf("Not Found%d is not present in the list.\n",n);
}
int main()
{
int a[200],i,j,n,size;
printf("Enter the size of list:");
scanf("%d",&size);
printf("Enter %d integers in ascending order\n",size);
for(i=0;i<size;i++)
scanf("%d",&a[i]);
printf("Enter the value of to find\n");
scanf("%d",&n);
printf("Sequential Search\n");
Sequential_Search(a,size,n);
printf("Binary Search\n");
Binary_Search(a,size,n);
return 0;
}

Output:
Enter the size of list:3
Enter 3 integers in ascending order
2 3 4
Enter the value of to find
3
Sequential Search
3 Found at location1.
Binary Search
3 Found at location2.

Program 5:
A. Bubble Sort:
#include<stdio.h>
void bubble_sort(int array[],int size)
{
for(int j=0;j<size-1;j++){
for(int i=0;i<size-1;i++)
{
if(array[i]>array[i+1])
{
int temp=array[i];
array[i]=array[i+1];
array[i+1]=temp;
}}
}
}
void printArray(int array[],int size)
{
for(int i=0;i<size;++i)
{
printf("%d ",array[i]);
}
printf("\n");
}
int main()
{
int data[]={-2,45,0,11,-9};
int size = sizeof (data)/sizeof (data[0]);
bubble_sort(data,size);
printf("Sorted Array in Ascending order:\n");
printArray(data,size);
}

Output:
Sorted Array in Ascending order:
-9 -2 0 11 45

Program 5:
B. Insertion Sort:
#include<stdio.h>
void printArray(int array[],int size)
{
for(int i=0;i<size;i++)
{
printf("%d ",array[i]);
}
printf("/n");
}
void insertion_sort(int array[],int size)
{
for(int step=1;step<size;step++)
{
int key=array[step];
int j=step-1;
while(key<array[j]&&j>=0)
{
array[j+1]=array[j];
--j;
}
array[j+1]=key;
}}
int main()
{
int data[]={9,5,1,4,3};
int size = sizeof (data)/sizeof(data[0]);
insertion_sort(data,size);
printf("Sorted array in ascending order:\n");
printArray(data,size);
}

Output:
Sorted array in ascending order:
1 3 4 5 9

Program 5:
C. Selection Sort:
#include <stdio.h>
void swap(int* a, int* b)
{
int temp = *a;
*a = *b;
*b = temp;
}
void selection_sort(int array[], int size)
{
for (int step = 0; step < size - 1; step++)
{
int main_idx = step;
for (int i = step + 1; i < size; i++)
{
if (array[i] < array[main_idx])
{
main_idx = i;
}
}
swap(&array[main_idx], &array[step]);
}
}
void print_array(int array[], int size)
{
for (int i = 0; i < size; i++)
{
printf("%d ", array[i]);
}
printf("\n");
}
int main()
{
int data[] = {20, 15, 10, 15, 12};
int size = sizeof(data) / sizeof(data[0]);
selection_sort(data, size);
printf("Sorted array in ascending order:\n");
print_array(data, size);
return 0;
}

Output:
Sorted array in ascending order:
10 12 15 15 20

Program 6:
Merge two array into a Single Array.
#include<stdio.h>
int main()
{
int size1, size2;
printf("Enter the size of the first array:");
scanf("%d",&size1);
int array1[size1];
printf("Enter the elements of the first array:\n");
for(int i=0;i<size1;i++)
{
scanf("%d",&array1[i]);
}
printf("Enter the size of the second array:");
scanf("%d",&size2);
int array2[size2];
printf("Enter the elements of the second array:\n");
for(int i=0;i<size2;i++)
{
scanf("%d",&array2[i]);
}
int mergedsize = size1+size2;
int mergedArray[mergedsize];
int index=0;
for(int i=0;i<size1;i++)
{
mergedArray[index++]=array1[i];
}
for(int i=0;i<size2;i++)
{
mergedArray[index++]=array2[i];
}
printf("merged Array:");
for(int i=0;i<mergedsize;i++)
{
printf("%d",mergedArray[i]);
}
printf("\n");
return 0;
}

Output:
Enter the size of the first array:5
Enter the elements of the first array:
1
2
4
3
8
Enter the size of the second array:4
Enter the elements of the second array:
5
4
3
merged Array:124385432

Program 7:
Factorial of a number using recursion.
#include<stdio.h>
int factorial(int n)
{
if(n==0||n==1)
{
return 1;
}
else
{
return n*factorial(n-1);
}}
int main()
{
int number;
printf("Enter a number to find its factorial:");
scanf("%d",&number);
if(number<0)
{
printf("Factorial is not defined for the negative numbers.\n");
}
else
{
int result = factorial(number);
printf("Factorial %d is %d.\n",number,result);
}
return 0;
}

Output:
Enter a number to find its factorial:5
Factorial 5 is 120.

Program 8:
PUSH and POP an element from a stack.
#include<stdio.h>
#include<stdlib.h>
int stack[100],n,choice,x,Top=-1;
void push();
void pop();
void show();
void main()
{
printf("Enter the size of stack:\n");
scanf("%d",&n);
while(1)
{
printf("\n1.push the element \n2.pop the element \n3.show \n4.end");
printf("\n\nEnter the choice:");
scanf("%d",&choice);
switch(choice)
{
case 1:
push();
break;
case 2:
pop();
break;
case 3:
show();
break;
case 4:
exit(0);
break;
default:
printf("\nEnter a valid choice\n");
}
}
}
void push()
{
if(Top==n-1)
{
printf("\nThe stack is overflow\n");
}
else
{
printf("Enter the element to be inserted:");
scanf("%d",&x);
Top++;
stack[Top]=x;
}
}
void pop()
{
if(Top==+1)
{
printf("\nPoped element:%d",stack[Top]);

Top--;
}
}
void show()
{
if (Top==-1)
{
printf("\nUnderflow\n");
}
else
{
printf("\nElement in stacks:\n");
for(int i=Top;i>=0;--i)
printf("%d\n",stack[i]);
}
}

Output:
Enter the size of stack:
4
1.push the element
2.pop the element
3.show
4.end
Enter the choice:2
1.push the element
2.pop the element
3.show
4.end
Enter the choice:1
Enter the element to be inserted:1234
1.push the element
2.pop the element
3.show
4.end
Enter the choice:1
Enter the element to be inserted:3456
1.push the element
2.pop the element
3.show
4.end
Enter the choice:3
Element in stacks:
3456
1234
1.push the element
2.pop the element
3.show
4.end
Enter the choice:
2
Poped element:3456
1.push the element
2.pop the element
3.show
4.end
Enter the choice:4

Program 9:
Insert and delete an element from a QUEUE.

#include<stdio.h>
#define max 20
#include<stdlib.h>
int queue_array[max];
int rear=-1;
int front=-1;
void insert()
{
int add_item;
if(rear==max-1)
{
printf("Queue Overflow\n");
}
else
{
if(front==-1)
front=0;
printf("\nEnter Element");
scanf("%d",&add_item);
printf("\n%d is inserted in queue \n",add_item);
printf("--------\n");
rear=rear+1;
queue_array[rear] = add_item;
}}
void delete()
{
if(front== -1||front>rear)
{
printf("Queue underflow \n");
return;
}
else
{
printf("\nElement deleted from Queue is: %d\n",queue_array[front]);
printf("---------\n");
front=front+1;
}}
void display()
{
int i;
if(front==1)
printf("\nQueue is:");
for(i=front;i<rear;i++)
printf("%d",queue_array[i]);
printf("\n--------");
printf("\n");
}
int main()
{
printf("perform Operations on queue\n");
printf("---------\n");
printf("\t menu");

printf("---------\n");
printf("1. Insert Element \n");
printf("2. Delete Element \n");
printf("3. Display queue \n");
printf("4. Exit \n");
printf("---------\n");
int ch;
while(1)
{
printf("choose operations:");
scanf("%d",&ch);
switch(ch)
{
case 1:
insert();
break;
case 2:
delete();
break;
case 3:
display();
break;
case 4:
exit(0);
default:
printf("Invalid operation \n");
}}
return 0;
}

Output:
perform Operations on queue
--------menu--------1. Insert Element
2. Delete Element
3. Display queue
4. Exit
--------choose operations:1
Enter Element34
34 is inserted in queue
-------choose operations:1
Enter Element45
45 is inserted in queue
-------choose operations:3
34
-------choose operations:2
Element deleted from Queue is: 34
--------choose operations:3
Queue is:
-------choose operations:4

Program 10:
Insert and Delete a node in a linked list.
#include <stdio.h>
#include <stdlib.h>
struct node {
int val;
struct node* next;
};
void print_list(struct node* head) {
printf("4->");
while (head) {
printf("%d\t", head->val);
head = head->next;
}
}
void insert_beginning(struct node** head, int value) {
struct node* new_node = (struct node*)malloc(sizeof(struct node));
new_node->val = value;
new_node->next = *head;
*head = new_node;
}
void insert_after(struct node* head, int value, int after) {
struct node* new_node = (struct node*)malloc(sizeof(struct node));
new_node->val = value;
struct node* temp = head;
while (temp) {
if (temp->val == after) {
new_node->next = temp->next;
temp->next = new_node;
return;
}
temp = temp->next;
}
}
void delete_node(struct node** head, int position) {
if (*head == NULL)
return;
struct node* temp = *head;
if (position == 0) {
*head = temp->next;
free(temp);
return;
}
for (int i = 0; temp != NULL && i < position - 1; i++)
temp = temp->next;
if (temp == NULL || temp->next == NULL)
return;
struct node* next = temp->next->next;
free(temp->next);
temp->next = next;

}
int main() {
int count, val, after, before, z, x;
struct node* head = NULL;
printf("Enter the number of elements: ");
scanf("%d", &count);
for (int i = 0; i < count; i++) {
printf("Enter element %d: ", i + 1);
scanf("%d", &val);
insert_beginning(&head, val);
}
while (1) {
printf("\n1. Insert at the beginning\n2. Insert after a value\n3.
Delete a node\n4. Exit\n");
scanf("%d", &z);
switch (z) {
case 1:
printf("Enter the element to insert: ");
scanf("%d", &val);
insert_beginning(&head, val);
printf("List after insertion:\n");
print_list(head);
break;
case 2:
printf("Enter the element to insert: ");
scanf("%d", &val);
printf("Enter the value after which to insert: ");
scanf("%d", &after);
insert_after(head, val, after);
printf("List after insertion:\n");
print_list(head);
break;
case 3:
printf("Enter the position of the node to delete: ");
scanf("%d", &x);
delete_node(&head, x);
printf("List after deletion:\n");
print_list(head);
break;
case 4:
return 0;
default:
printf("Invalid choice\n");
}
}
}

Output:
Enter the number of elements: 5
Enter element 1: 23
Enter element 2: 45
Enter element 3: 50
Enter element 4: 32
Enter element 5: 60
1. Insert at the beginning
2. Insert after a value
3. Delete a node
4. Exit
3
Enter the position of the node to delete: 2
List after deletion:
4->60 32
45
23
1. Insert at the beginning
2. Insert after a value
3. Delete a node
4. Exit
1
Enter the element to insert: 3
List after insertion:
4->3 60
32
45
23
1. Insert at the beginning
2. Insert after a value
3. Delete a node
4. Exit

